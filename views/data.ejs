
<!DOCTYPE html>
<html lang='en'>
<head>
	<meta charset='utf-8'>
	<meta content='width=device-width, initial-scale=0.8, maximum-scale=0.8, user-scalable=0' name='viewport' />

	<script src="/js/lib/jquery.js"></script>
	<script src='/js/lib/common.js'></script>
	<script src="/js/lib/underscore.js"></script>
	
	<script src="/json/cgm.json"></script>
	<script src="/json/bg.json"></script>
	<script src="/json/pump-settings.json"></script>
	<script src="/json/pump-adherence.json"></script>
	<script src="/json/pump-insulin.json"></script>
	<script src="/json/pump-events.json"></script>

	<script>
	var pstTime = function(time) {
		var date = new Date(time);
		var utc = toUTC(date);
		
		utc.setHours(date.getHours() - 7);

		return utc;
	};

	var toUTC = function(date) { return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()); }

	var replaceAt = function(string, index, character) {
  	return string.substr(0, index) + character + string.substr(index+character.length);
  }

  var jsifyNames = function(name) {
  	var regex = /-/g;
  	var result = [];

		while ( (result = regex.exec(name)) ) {
			name = replaceAt(name, result.index+1, name.charAt(result.index+1).toUpperCase());
		}
		
		name = name.replace(regex, '');
			  	
  	return name;
  };

 	$(function() {
		var insulin = pumpInsulin.map(function(entry) {

			entry.unixTimeUTC = toUTC(new Date(entry.time)).getTime();
			entry.unixTime = pstTime(entry.time).getTime();
			delete entry['time'];

			if(entry.dur) {
				entry.duration = entry.dur;
				delete entry.dur;
			}

			if (entry['bolus_type']) {
				entry.bolusType = entry['bolus_type'];
				delete entry['bolus_type'];
			}

			if (entry.bolus) {
				entry.type = 'bolus';
			}

			if (entry.basal) {
				entry.type = 'basal';
			}

			if (entry.carbs) {
				entry.type = 'carbs';
			}

			return entry;
		});

		var adherence = pumpAdherence.map(function(entry) {

			entry.unixTimeUTC = toUTC(new Date(entry.time)).getTime();
			entry.unixTime = pstTime(entry.time).getTime();
			delete entry['time'];

			if(entry.dur) {
				entry.duration = entry.dur;
				delete entry.dur;
			}

			delete entry['time'];

			entry.bg = {
				time: entry['post-time'],
				bg: entry['post-bg']
			}
			delete entry['post-bg'];
			delete entry['post-time'];

			entry.bolusType = entry.type;
			entry.type = 'bolus-calculator';

			return entry;
		});

		var smbg = bg.map(function(entry) {
			entry.unixTimeUTC = toUTC(new Date(entry.time)).getTime();
			entry.unixTime = pstTime(entry.time).getTime();
			delete entry['time'];

			entry.type = 'bg';

			return entry;
		});

		var _cgm = cgm.map(function(entry) {
			entry.unixTimeUTC = toUTC(new Date(entry.time)).getTime();
			entry.unixTime = pstTime(entry.time).getTime();
			delete entry['time'];

			entry.type = 'cbg';

			return entry;
		});

		var events = pumpEvents.map(function(entry) {
			entry.unixTimeUTC = toUTC(new Date(entry.time)).getTime();
			entry.unixTime = pstTime(entry.time).getTime();
			delete entry['time'];

			entry.type = 'event';

			return entry;
		});		

		var settings = pumpSettings.map(function(entry) {
			entry.unixTimeUTC = toUTC(new Date(entry.time)).getTime();
			entry.unixTime = pstTime(entry.time).getTime();
			delete entry['time'];

			entry.type = 'settings';

			var dash = ['basal-programs', 'bg-targets-program', 'ic-program', 'isf-program'];

			for(var i in dash) {
				entry[jsifyNames(dash[i])] = entry[dash[i]];
				delete entry[dash[i]];
			}

			for(var i in entry['base']) {
				entry[jsifyNames(i)] = entry['base'][i];
				delete entry['base'][i];
			}

			return entry;
		});

		var data = [].concat(pumpAdherence,pumpInsulin,pumpEvents,pumpSettings,bg,cgm);
		
		data = _.sortBy(data, function(d) {
			return d.unixTime;
		});

		//console.log(JSON.stringify(_.uniq(data, function(d){ return _.keys(d).toString()}),null,'\t'));
		console.log(JSON.stringify(data, null, '\t'));
	});
	</script>

</head>
<body>
</body>
</html>