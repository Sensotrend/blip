// Generated by CoffeeScript 1.6.3
var dxcomParser, columns, es, moment;

es = require('event-stream');

moment = require('moment');

columns = {};

columns['GlucoseInternalTime'] = 2;

columns['Glucose Value'] = 4;

dxcomParser = function() {
  var meta, responder, stream;
  meta = {};
  stream = es.pipeline(es.split(), es.map(function(data, cb) {
    var fields, rec, type;
    fields = data.split(',');
    type = fields[33];
    if (fields.length < 36) {
      return cb(null, data);
    } else {
      rec = {
        type: type,
        data: data
      };
      stream.emit('type', rec);
      return cb();
    }
  }));
  responder = function(filter) {
    var tr;
    tr = es.through();
    stream.on('type', function(data) {
      if (data.type.match(filter)) {
        return tr.push(data.data);
      }
    });
    return es.pipeline(stream, tr);
  };
  stream.sugars = function() {
    return es.pipeline(responder(/GlucoseSensorData|BGLifeScan|BGTherasense/g), es.map(function(rawData, callback) {
      var entryValues, processedSugar;
      entryValues = rawData.split('\t');
      
      processedSugar = {
        value: entryValues[columns['Glucose Value']],
        type: 'cbg',
        time: moment(entryValues[columns['GlucoseInternalTime']]).toISOString()
      };
      return callback(null, JSON.stringify(processedSugar));
    }));
  };
  stream.responder = responder;
  return stream;
};

dxcomParser.sugars = function() {
  return dxcomParser().sugars();
};

dxcomParser.columns = function() {
  return columns;
};

module.exports = dxcomParser;
